name: Prepare Blog Content

on:
  workflow_dispatch:
  schedule:
    - cron: "10 3 * * *"   # täglicher Rebuild

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repo
        uses: actions/checkout@v4

      - name: Checkout vault repo
        uses: actions/checkout@v4
        with:
          repository: tuxpeople/obsidian-blog-source
          path: vault
          token: ${{ secrets.SOURCE_TOKEN }}   # falls privat

      - name: Install obsidian-export
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/zoni/obsidian-export/releases/download/v25.3.0/obsidian-export-installer.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          obsidian-export --version

      - name: Export blog posts + assets
        run: |
          rm -rf _posts assets/images
          mkdir -p _posts assets/images
          obsidian-export "vault/Blog/ready" _posts
          find _posts -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" \) -exec mv {} assets/images/ \;
          for file in _posts/*.md; do
            sed -i 's#](assets/#](/assets/images/#g' "$file"
          done

      - name: Ensure Jekyll filenames
        run: |
          for f in _posts/*.md; do
            base="$(basename "$f" .md)"
            base=$(echo "$base" | tr '[:upper:]' '[:lower:]')
            if [[ ! "$base" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}- ]]; then
              d="$(grep -m1 '^date:' "$f" | sed 's/^date:[[:space:]]*//')"
              # ISO-Datum extrahieren; fallback: heute
              datepart="$(date -d "$d" +%F 2>/dev/null || date +%F)"
              title="${base}"
              # slugify rudimentär
              title="$(echo "$title" | sed -e 's/[Ää]/ae/g' -e 's/[Öö]/oe/g' -e 's/[Üü]/ue/g' -e 's/ß/ss/g' \
                                           -e 's/[^A-Za-z0-9 -]//g' -e 's/[[:space:]]\+/-/g' -e 's/-\+/-/g' \
                                           | tr '[:upper:]' '[:lower:]')"
              mv "$f" "_posts/${datepart}-${title}.md"
            fi
          done
      - name: Strip duplicate H1 (matches frontmatter title)
        run: |
          for f in _posts/*.md; do
            # Titel aus dem Frontmatter holen (einfaches YAML-Parse)
            title="$(awk '
              BEGIN{inFM=0}
              /^---[[:space:]]*$/{inFM=!inFM; next}
              inFM && $1=="title:"{
                $1=""; sub(/^[[:space:]]+/, "", $0)
                gsub(/^"|"$/, "", $0); print $0; exit
              }' "$f")"
      
            # Erste H1 nach dem Frontmatter entfernen, wenn sie dem Titel entspricht
            awk -v t="$title" '
              function tolower_utf(s){ # gawk on ubuntu-latest hat tolower()
                return tolower(s)
              }
              BEGIN{inFM=0; removed=0}
              /^---[[:space:]]*$/{
                inFM=!inFM; print; next
              }
              inFM { print; next }
      
              # Nach dem Frontmatter:
              removed==0 && ($0 ~ /^#[[:space:]]+/) {
                line=$0
                sub(/^#[[:space:]]+/, "", line)
                if (tolower_utf(line)==tolower_utf(t)) { removed=1; next }
              }
      
              { print }
            ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done


      - name: Commit & Push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add _posts assets/images
          git commit -m "Update blog content" || echo "No changes"
          git push
